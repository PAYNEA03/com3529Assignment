package autoGeneratedTests;

import org.junit.jupiter.api.Test;
import assignmentFiles.subjectFiles.*;
import static org.junit.jupiter.api.Assertions.assertEquals;

public class TestCalendarCondition {

    @Test()
    public void daysBetweenTwoDatesSequencedaysBetweenTwoDates0000100000000000000000() // Sequence of 1 & 0 in method name denote order each branch/condition in test is executed as true or false
    {
        int var = Calendar.daysBetweenTwoDates(-4, 12, -4, 6, 10, 15);
        assertEquals(3605, var);
    }

    @Test()
    public void daysBetweenTwoDatesSequencedaysBetweenTwoDates1100000010000000100000() // Sequence of 1 & 0 in method name denote order each branch/condition in test is executed as true or false
    {
        int var = Calendar.daysBetweenTwoDates(10, -13, 4, -4, -7, 5);
        assertEquals(5113, var);
    }

    @Test()
    public void daysBetweenTwoDatesSequencedaysBetweenTwoDates0000110010000000000000() // Sequence of 1 & 0 in method name denote order each branch/condition in test is executed as true or false
    {
        int var = Calendar.daysBetweenTwoDates(-10, 1, -6, -15, 12, -3);
        assertEquals(1492, var);
    }

    @Test()
    public void daysBetweenTwoDatesSequencedaysBetweenTwoDates1001100010000010000000() // Sequence of 1 & 0 in method name denote order each branch/condition in test is executed as true or false
    {
        int var = Calendar.daysBetweenTwoDates(5, -1, -1, -3, 13, 1);
        assertEquals(2588, var);
    }

    @Test()
    public void daysBetweenTwoDatesSequencedaysBetweenTwoDates1000100001010001000000() // Sequence of 1 & 0 in method name denote order each branch/condition in test is executed as true or false
    {
        int var = Calendar.daysBetweenTwoDates(-11, -7, -3, -11, 8, 1);
        assertEquals(212, var);
    }

    @Test()
    public void daysBetweenTwoDatesSequencedaysBetweenTwoDates0010100000000010100000() // Sequence of 1 & 0 in method name denote order each branch/condition in test is executed as true or false
    {
        int var = Calendar.daysBetweenTwoDates(-12, 13, -5, -7, 12, 10);
        assertEquals(1835, var);
    }

    @Test()
    public void daysBetweenTwoDatesSequencedaysBetweenTwoDates0100110001100011000000() // Sequence of 1 & 0 in method name denote order each branch/condition in test is executed as true or false
    {
        int var = Calendar.daysBetweenTwoDates(-8, 9, 0, -8, -8, -5);
        assertEquals(244, var);
    }

    @Test()
    public void daysBetweenTwoDatesSequencedaysBetweenTwoDates1100100001011000110000() // Sequence of 1 & 0 in method name denote order each branch/condition in test is executed as true or false
    {
        int var = Calendar.daysBetweenTwoDates(8, -15, -6, 8, -6, 13);
        assertEquals(12, var);
    }

    @Test()
    public void daysBetweenTwoDatesSequencedaysBetweenTwoDates1100000001011100110000() // Sequence of 1 & 0 in method name denote order each branch/condition in test is executed as true or false
    {
        int var = Calendar.daysBetweenTwoDates(-5, -14, 10, -5, -13, 9);
        assertEquals(1, var);
    }
}
