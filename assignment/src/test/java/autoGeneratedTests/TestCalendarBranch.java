package autoGeneratedTests;

import org.junit.jupiter.api.Test;
import assignmentFiles.subjectFiles.*;
import static org.junit.jupiter.api.Assertions.assertEquals;

public class TestCalendarBranch {

    @Test()
    public void daysBetweenTwoDatesSequence0101100110010101101101010110() // Sequence of 1 & 0 in method name denote order each branch/condition in test is executed as true or false
    {
        int var = Calendar.daysBetweenTwoDates(15, 15, -12, -3, 12, 3);
        assertEquals(6572, var);
    }

    @Test()
    public void daysBetweenTwoDatesSequence1101110110110101111101011110() // Sequence of 1 & 0 in method name denote order each branch/condition in test is executed as true or false
    {
        int var = Calendar.daysBetweenTwoDates(3, -4, -4, 14, 11, -14);
        assertEquals(4322, var);
    }

    @Test()
    public void daysBetweenTwoDatesSequence1111110110110101111101011110() // Sequence of 1 & 0 in method name denote order each branch/condition in test is executed as true or false
    {
        int var = Calendar.daysBetweenTwoDates(-4, -13, -7, -5, -8, -10);
        assertEquals(365, var);
    }

    @Test()
    public void daysBetweenTwoDatesSequence1111110111110101111101011110() // Sequence of 1 & 0 in method name denote order each branch/condition in test is executed as true or false
    {
        int var = Calendar.daysBetweenTwoDates(-10, 11, 2, 12, -3, -5);
        assertEquals(7730, var);
    }

    @Test()
    public void daysBetweenTwoDatesSequence1111110111110101111111011110() // Sequence of 1 & 0 in method name denote order each branch/condition in test is executed as true or false
    {
        int var = Calendar.daysBetweenTwoDates(10, -14, 12, 10, 2, 0);
        assertEquals(20, var);
    }

    @Test()
    public void daysBetweenTwoDatesSequence1111111111110101111111011110() // Sequence of 1 & 0 in method name denote order each branch/condition in test is executed as true or false
    {
        int var = Calendar.daysBetweenTwoDates(8, -15, -4, 11, 14, -5);
        assertEquals(1430, var);
    }

    @Test()
    public void daysBetweenTwoDatesSequence1111111111110101111111011111() // Sequence of 1 & 0 in method name denote order each branch/condition in test is executed as true or false
    {
        int var = Calendar.daysBetweenTwoDates(-2, 0, -8, -2, 8, 11);
        assertEquals(222, var);
    }

    @Test()
    public void daysBetweenTwoDatesSequence1111111111110101111111111111() // Sequence of 1 & 0 in method name denote order each branch/condition in test is executed as true or false
    {
        int var = Calendar.daysBetweenTwoDates(-10, -1, 11, -10, -8, -1);
        assertEquals(10, var);
    }
}
