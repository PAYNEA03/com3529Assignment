package autoGeneratedTests;

import org.junit.jupiter.api.Test;
import assignmentFiles.subjectFiles.*;
import static org.junit.jupiter.api.Assertions.assertEquals;

public class TestTriangleCondition {

    @Test()
    public void classifySequence1110001() // Sequence of 1 & 0 in method name denote order each branch/condition in test is executed as true or false
    {
        Triangle.Type var = Triangle.classify(3, -1, -4);
        assertEquals(Triangle.Type.INVALID, var);
    }

    @Test()
    public void classifySequence1010001() // Sequence of 1 & 0 in method name denote order each branch/condition in test is executed as true or false
    {
        Triangle.Type var = Triangle.classify(15, -15, 0);
        assertEquals(Triangle.Type.INVALID, var);
    }

    @Test()
    public void classifySequence0110000() // Sequence of 1 & 0 in method name denote order each branch/condition in test is executed as true or false
    {
        Triangle.Type var = Triangle.classify(12, 14, 9);
        assertEquals(Triangle.Type.SCALENE, var);
    }

    @Test()
    public void classifySequence1000001() // Sequence of 1 & 0 in method name denote order each branch/condition in test is executed as true or false
    {
        Triangle.Type var = Triangle.classify(4, -13, 6);
        assertEquals(Triangle.Type.INVALID, var);
    }

    @Test()
    public void classifySequence0000010() // Sequence of 1 & 0 in method name denote order each branch/condition in test is executed as true or false
    {
        Triangle.Type var = Triangle.classify(14, 14, 15);
        assertEquals(Triangle.Type.SCALENE, var);
    }

    @Test()
    public void classifySequence0001000() // Sequence of 1 & 0 in method name denote order each branch/condition in test is executed as true or false
    {
        Triangle.Type var = Triangle.classify(10, 12, 12);
        assertEquals(Triangle.Type.ISOSCELES, var);
    }

    @Test()
    public void classifySequence0000110() // Sequence of 1 & 0 in method name denote order each branch/condition in test is executed as true or false
    {
        Triangle.Type var = Triangle.classify(4, 4, 4);
        assertEquals(Triangle.Type.EQUILATERAL, var);
    }
}
